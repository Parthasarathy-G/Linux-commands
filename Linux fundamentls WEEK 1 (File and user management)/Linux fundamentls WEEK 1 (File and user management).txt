Linux fundamental commands
--------------------------
cd - used to change the current directory.

whoami - displays the currently logged-in user.

clear - clears the terminal screen.

pwd - prints the current working directory.

touch - creates an empty file.

nano - a text editor to create and edit files.

mkdir - creates a new directory.

rmdir - removes an empty directory.

rm - deletes a file or directory.

cp - copies files or directories.

echo - prints text to the terminal.

cat - concatenates and displays the contents of a file.

mv - renames or moves a file or directory.

more - displays the contents of a file one screen at a time.

less - similar to more, but allows backward movement in the file.

head - displays the first 10 lines of a file.

head -n <number of lines> - displays the specified number of lines from the top of a file.

tail - displays the last 10 lines of a file.

tail -n <number of lines> - displays the specified number of lines from the bottom of a file.

nl - displays the contents of a file with line numbers.

file - determines the type of a file.

uname - displays system information.

tar - archives files and directories.

diff - compares the contents of two files line by line.

cmp - compares two files byte by byte.

comm - compares two sorted files line by line.

sort - sorts lines of text files.

zip - compresses files into a zip archive.

unzip - extracts files from a zip archive.

service - manages system services (start, stop, restart, etc.).


***************************************************************************************************************************************
 
-type - specifies the type of file to find, such as 'd' for directories and 'f' for files.

find - used to find a file or folder by specifying -name "<Filename>" or "<*.extension>".

find <filelocation> -mtime -<NumberOfDays> - finds files modified within the last specified number of days.

find <filelocation> -mtime +<NumberOfDays> - finds files modified more than the specified number of days ago.

find <FileLocation> -type f -exec grep -l "<WordsToBeSearched>" {} \; - returns the file names containing the specified words.

locate <FileName> or <*.extension> - quickly finds files by name or extension.

which - used to find the location of executable files.

man - displays the manual page for a command.

whereis - used to find the location of executables and their associated files.

****************************************************************************************************************************************

ls - lists the files in the current directory.

ls -F - appends a character to each file name to indicate the file type.

ls -a - lists all files, including hidden files.

ls -R - lists files in the current directory and all subdirectories recursively.

ls -l - displays detailed information about each file, such as permissions, owner, size, and modification date.

ls filename* - lists files that match the specified pattern.

ls *lastcharacters - lists files that end with the specified characters.

***************************************************************************************************************************************

vi or vim - used to edit files in the Vim editor.

(SHIFT + ;) then press q to exit the Vim editor.

i - press 'i' to start editing in Vim.

esc - press 'esc' to exit insert mode.

Shift + ; then press wq to write changes and quit.

ln -s - creates a symbolic link.

ln -s -f - forces the creation of a symbolic link, even if the target already exists.

ln <SourceFilePath> <TargetFilePath> - creates a hard link.

***************************************************************************************************************************************

File permissions
--------------------------

When using long listing (ls -l), the first character denotes the type of file:

- for regular files

d for directories

l for symbolic links

File permissions are divided into three categories:

> Permissions for the file owner
> Permissions for group members
> Permissions for others

r for read permissions

w for write permissions

x for execute permissions (e.g., for binary files like ls)

For example 
------------

rw-           rw-       r--
(Owner)     (Group)   (Everyone)

---     No permissions
--x     Execute-only permission
-W-     Write-only permission
-wx     Write and execute permissions
r--     Read-only permissions
r-x     Read and execute permissions
rw-     Read and write permissions
rwx     Read, Write, and execute permissions

***************************************************************************************************************************************

User permissions
------------------

u - user

g - group

o - others

chmod - used to change permissions for users, groups, and others.

+ to add permission.
- to remove permission.

For example
------------

chmod u-r <FileName> - removes read access for a user.

***************************************************************************************************************************************

Creating users and groups
--------------------------

sudo useradd <username> -m - creates a user with a home directory.

sudo passwd <username> - sets the password for a user.

su - <username> - switches to the specified user.

exit - exits the current user session.

sudo usermod - modifies user account properties.

sudo usermod -s /bin/bash <username> - sets bash as the default shell for a user.

sudo groupadd <groupname> - creates a new group.

sudo usermod -aG <groupname> <username> - adds a user to a group.

groups <username> - displays all groups the user belongs to.

sudo chown :<GroupName> <FileName> - changes the group ownership of a file.

***********************************************************************************************************************************************************
